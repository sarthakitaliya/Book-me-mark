generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  bookmarks Bookmark[]
  folders   Folder[]
  sessions  Session[]
  accounts  Account[]
  tags      Tag[]

  @@unique([email])
  @@map("user")
}

model Folder {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  color     String?
  icon      String?
  createdAt DateTime @default(now())

  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId String?
  parent   Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children Folder[] @relation("FolderHierarchy")

  bookmarks Bookmark[]
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bookmarks Bookmark[] @relation("BookmarkTags")

  @@unique([name, userId])
}

model Bookmark {
  id           String       @id @default(uuid())
  title        String
  url          String?
  type         BookmarkType
  notes        String?
  previewImage String?
  favicon      String?
  isFavorite   Boolean      @default(false)
  createdAt    DateTime     @default(now())

  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId String?
  folder   Folder? @relation(fields: [folderId], references: [id], onDelete: Cascade)

  tags Tag[] @relation("BookmarkTags")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum BookmarkType {
  url
  notes
  youtube
  image
  svg
  tweet
}
